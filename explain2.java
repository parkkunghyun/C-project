public class explain2 {
    public static void main(String[] args) {
        
    }
    
}
/*  
 *
 프로그램: 컴퓨터가 실행할 수 있는 명령어들의 집합
 프로세스: 컴퓨터에서 실행중인 프로그램-> 독립된 메모리 공간을 각각 할당받음!(명령어와 데이터)
 cpu: 명령어를 실행하는 연산장리
 메인 메모리 : 프로세스가 cpu에서 실행되기 위해 대기하는 곳
 IO ->파일을 읽고 쓰거나 네트워크 어딘가와 데이터를 주고받는것, 입출력 장치와 데이터 주고받기

 초창기 컴퓨터
    단일 프로세스 시스템 : 한번에 하나의 프로그램만 실행
    cpu사용률이 좋지않다 -> p1이라는 프로그램이 있다 cpu와 io작업을 함
        p1이 cpu에서 작업하다가 io작업을 하게 되면 cpu가 놀게 됨!
    그래서 여러개의 프로그램을 메모리에 올려서 동시에 실행시키자! -> io작업이 발생하면 다른 프로세스를 cpu가 실행!

현재 컴퓨터 - 멀티프로그래밍
    p1,p2가 있다 -> cpu에서 p1의 프로그램을 실행 그러다 io를 하게 된다면 cpu가 p2를 실행!
    멀티프로그래밍이라고 함! - cpu사용률을 극대화하는게 목적!
    cpu사용시간 길어지면 다른프로세스들이 대기를 해야함!
    그래서 프로세스는 한번 cpu를 사용할때 아주 짧은시간(quantum)만 cpu에서 실행시키자

멀티태스킹
p1, p2라는 프로그램이 존재 -> p1실행 좀 됐다가 p2하고 이렇게 반복! -> ms단위까지 쪼갬
이게 멀티태스킹이라고 함! -> 멀티프로그래밍과 유사하지만 cpu타임을 정했다는것에 차이가 있다
프로세스의 응답시간을 최소화 시키는게 목적!!

아쉬운점

하나의 프로세스가 동시에 여러 작업을 수행하지는 못함! --> 프로세스 안에서 여러개를 동시 동작시키고 싶다
프로세스의 컨텍스트 스위칭은 무거움!! (cpu실행되기 위해 프로세스끼리 교체하는 것)
프로세스끼리 데이터 공유가 까다로움(독립 메모리공간을 서로 가지기 때문에!)
듀얼 코어가 등장!! -> cpu를 여러개 사용!

스레드 -> 한 프로세스 안에서 여러개 동작 동시에 하고 싶어서!
프로세스는 한개 이상의 스레드를 가질 수 있다 
cpu에서 실행되는 단위 -> 예전에는 프로세스가 단위였다면 이제는 스레드가 단위가 됨!
같은 프로세스의 스레드들끼리 컨텍스트 스위칭이 가볍다
스레드들은 자신들이 속한 프로세스에서 메모리 영역을 공유! -> 데이터 공유, 컨텍스트 스위칭이 가벼워짐

메모리 영역을 공유 -> 힙을 공유! 하지만 자신만의 고유한 영역도 있는데 그건 스택이다!!

두개의 스래드를 가지는 프로세스가 있다고 가정
일단 시간을 쪼개고 각각 조금씩 스레드가 사용! 
cpu가 코어가 두개라면 -> 스레드가 각각 맞춰서 실행-> 진짜 동시가 됨!

멀티 스레딩! -> 하나의 프로세스가 동시에 여러작업을 실행하는데 목적!

확장된 멀티태스킹 개념 -> 여러 프로세스와 여러 스레드가 cpu time을 나눠가지는 것!
멀티프로세싱 -> 두개이상의 프로세서나 코어를 활용하는 시스템

싱글코어 cpu에 싱글 스레드 프로세스 두개 -> 멀티태스킹! 나눠서 쓰기 때문에 멀티태스킹
싱글코어 cpu에 듀얼-스레드 프로세스 한개 -> 멀티태스킹이면서 멀티스레딩
듀얼코어 cpu에 싱글 스레드 프로세스 두개 -> 멀티프로세싱, 멀티태스킹은 없다! 
듀얼코어 cpu에 듀얼 스레드 프로세스 한개 -> 멀티프로세싱, 멀티 스레딩
듀얼코어 cpu에 듀얼 스레드 프로세스 두개 -> 멀티프로세싱, 멀티 스레딩 멀티태스킹
 */